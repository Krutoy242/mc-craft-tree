ZenScript {

  Statement = Expression ";"?

  Expression 
    = ("-")    Expression  -- unary
    | LeftHandSideExpression

  LeftHandSideExpression 
    = Expression "as" anyType -- typed
    | Expression "*" Expression -- mult
    | Expression "|" Expression -- or
    | CallExpression
    | MemberExpression

  anyType = ("bool"|"short"|"long"|"float"|"double"|"byte"|"int") "[]"?

  CallExpression = MemberExpression Arguments

  MemberExpression 
    = MemberExpression "[" Expression "]"  -- arrayRefExp
    | MemberExpression "." identifier  -- propRefExp
    | PrimaryExpression

  PrimaryExpression 
    = identifier
    | literal
    | ArrayLiteral
    | ObjectLiteral
    | BracketHandler
    | "(" Expression ")"  -- parenExpr

    literal = nullLiteral | booleanLiteral | numericLiteral
          | stringLiteral
  nullLiteral = "null" ~identifierPart
  booleanLiteral = ("true" | "false") ~identifierPart

  
  // Note that the ordering of hexIntegerLiteral and decimalLiteral is reversed w.r.t. the spec
  // This is intentional: the order decimalLiteral | hexIntegerLiteral will parse
  // "0x..." as a decimal literal "0" followed by "x..."
  numericLiteral = hexIntegerLiteral | decimalLiteral

  decimalLiteral = decimalIntegerLiteral "." decimalDigit* exponentPart -- bothParts
                 |                       "." decimalDigit+ exponentPart -- decimalsOnly
                 | decimalIntegerLiteral                   exponentPart -- integerOnly

  decimalIntegerLiteral = nonZeroDigit decimalDigit*  -- nonZero
                        | "0"                         -- zero
  decimalDigit = "0".."9"
  nonZeroDigit = "1".."9"

  exponentPart = exponentIndicator signedInteger -- present
               |                                 -- absent
  exponentIndicator = "e" | "E"
  signedInteger = "+" decimalDigit* -- positive
                | "-" decimalDigit* -- negative
                |     decimalDigit+ -- noSign

  hexIntegerLiteral = "0x" hexDigit+
                    | "0X" hexDigit+

  ArrayLiteral = "[" ListOf<Expression, ","> "]"

  Arguments = "(" ArgumentsList ")"
  ArgumentsList = ListOf<Expression, ",">

  Argument = stringLiteral
    | BracketHandler

  BracketHandler = "<" anyBrHLetter+ ">"

  anyBrHLetter = ~(">") any

  ObjectLiteral 
    = "{" "}" -- empty
    |"{" ListOf<PropertyAssignment, ","> "}"              -- noTrailingComma
    | "{" NonemptyListOf<PropertyAssignment, ","> "," "}"  -- trailingComma

  PropertyAssignment = PropertyName ":" Expression

  PropertyName = identifier
               | stringLiteral
               | numericLiteral

  stringLiteral
    = "\"" doubleStringCharacter* "\""

  doubleStringCharacter = ~("\"" | "\\") any

  identifier (an identifier) = identifierStart identifierPart*

  identifierStart = letter | "$" | "_"
  identifierPart = identifierStart
                 | "\u200C" | "\u200D" | digit
}